/*
 * MIT License
 *
 * Copyright (c) 2021 CSCS, ETH Zurich
 *               2021 University of Basel
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/*! @file
 * @brief net14 constants definition.
 *
 * @author Joseph Touzet <joseph.touzet@ens-paris-saclay.fr>
 */


#pragma once

#include <array>
#include <vector>
#include <algorithm>
#include <numeric>
#include <cmath>

#include "nnet_util/CUDA/cuda.inl"

namespace nnet::net14::constants {
	const static double pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001927876611195909216420198938095257201065485863278865936153381827968230301952035301852968995773622599413891249721775283479131515574857242454150695950829533116861727855889075098381754637464939319;
	const static double Kb = 1.380658e-16;
	const static double Na = 6.022137e23;
	const static double e2 = 2.306022645e-19;
	const static double Mev_to_erg = 9.648529392e17;

	/*! @brief constant atomic number values */
	DEVICE_DEFINE(inline static const std::array<double COMMA 14>, Z, = {
		2 COMMA 6 COMMA 8 COMMA 10 COMMA 12 COMMA 14 COMMA 16 COMMA 18 COMMA 20 COMMA 22 COMMA 24 COMMA 26 COMMA 28 COMMA 30
	};)

	/*! @brief constant number of masses values */
	DEVICE_DEFINE(inline static const std::array<double COMMA 14>, A, = {
		4 COMMA 12 COMMA 16 COMMA 20 COMMA 24 COMMA 28 COMMA 32 COMMA 36 COMMA 40 COMMA 44 COMMA 48 COMMA 52 COMMA 56 COMMA 60
	};)

	/*! @brief order of nuclear species */
	const std::vector<double> species_order = []() {
		std::vector<double> species_order_(A.size());
		std::iota(species_order_.begin(), species_order_.end(), 0);
		std::sort(species_order_.begin(), species_order_.end(), 
			[&](const int idx1, const int idx2){
				if (Z[idx1] < Z[idx2])
					return true;
				if (Z[idx1] > Z[idx2])
					return false;

				return A[idx1] < A[idx2];
			});

		return species_order_;
	}();

	/*! @brief nuclear species names */
	const std::vector<std::string> species_names = {
		"4He", "12C", "16O", "20Ne", "24Mg", "28Si", "32S", "36Ar", "40Ca", "44Ti", "48Cr", "52Fe", "56Ni", "60Zn"
	};


	// function for coulombian correction
	template<typename Float>
	HOST_DEVICE_FUN Float inline ggt1(const Float x) {
		const Float a1 = -.898004;
		const Float b1 = .96786;
		const Float c1 = .220703;
		const Float d1 = -.86097;

		const Float sqroot2x = std::sqrt(std::sqrt(x));
		return a1*x + b1*sqroot2x + c1/sqroot2x + d1;
	}
	// function for coulombian correction
	template<typename Float>
	HOST_DEVICE_FUN Float inline glt1(const Float x) {
		const Float a1 = -.5*std::sqrt(3.);
		const Float b1 = .29561;
		const Float c1 = 1.9885;

		return a1*x*std::sqrt(x) + b1*std::pow(x, c1);
	}


	namespace fits {
		HOST_DEVICE_FUN int inline get_temperature_range(double T) {
			if (T < 1.5e8) return 0;

			if (T < 2e8) return 1;
			if (T < 3e8) return 2;
			if (T < 4e8) return 3;
			if (T < 5e8) return 4;
			if (T < 6e8) return 5;
			if (T < 7e8) return 6;
			if (T < 8e8) return 7;
			if (T < 9e8) return 8;
			if (T < 1e9) return 9;

			if (T < 1.5e9) return 10;
			if (T <   2e9) return 11;
			if (T < 2.5e9) return 12;
			if (T <   3e9) return 13;
			if (T < 3.5e9) return 14;
			if (T <   4e9) return 15;
			if (T < 4.5e9) return 16;
			if (T <   5e9) return 17;

			if (T <  6e9) return 18;
			if (T <  7e9) return 19;
			if (T <  8e9) return 20;
			if (T <  9e9) return 21;
			if (T < 1e10) return 22;

			return 23;
		}

		DEVICE_DEFINE(static constexpr inline double, q[14 - 4], = {
			9.3160e0 COMMA 9.9840e0 COMMA 6.9480e0 COMMA 6.6390e0 COMMA 7.0400e0 COMMA 5.1270e0 COMMA 7.6920e0 COMMA 7.9390e0 COMMA 7.9950e0 COMMA 2.7080e0
		};)

		DEVICE_DEFINE(static constexpr inline double, fit[14 - 4][8], = {
			{1.335429e2 COMMA -2.504361e0 COMMA   7.351683e1 COMMA -2.217197e2 COMMA  1.314774e1 COMMA -7.475602e-1 COMMA 9.602703e1 COMMA  1.583615e2} COMMA
			{1.429069e2 COMMA -3.288633e0 COMMA   1.042707e2 COMMA -2.650548e2 COMMA  1.391863e1 COMMA -6.999523e-1 COMMA 1.216164e2 COMMA  1.677677e2} COMMA
			{9.710066e1 COMMA -3.324446e0 COMMA   5.358524e1 COMMA -1.656830e2 COMMA  7.199997e0 COMMA -2.828443e-1 COMMA 7.933873e1 COMMA  1.219924e2} COMMA
			{-1.917005e2 COMMA 6.797907e-1 COMMA -3.384737e2 COMMA  5.501609e2 COMMA -3.881261e1 COMMA  2.530003e0 COMMA -2.432384e2 COMMA -1.667851e2} COMMA
			{-1.290140e2 COMMA 3.252004e-1 COMMA -3.322780e2 COMMA  4.687703e2 COMMA -2.913671e1 COMMA  1.765989e0 COMMA -2.224539e2 COMMA -1.040800e2} COMMA
			{-7.480556e2 COMMA 1.235853e1 COMMA  -1.360082e3 COMMA  2.199106e3 COMMA -1.330803e2 COMMA  7.734556e0 COMMA -1.034036e3 COMMA -7.231065e2} COMMA
			{-9.130837e2 COMMA 1.594906e1 COMMA  -1.694960e3 COMMA  2.711843e3 COMMA -1.575353e2 COMMA  8.856425e0 COMMA -1.292620e3 COMMA -8.881222e2} COMMA
			{-9.291031e2 COMMA 2.057299e1 COMMA  -2.039678e3 COMMA  3.077998e3 COMMA -1.715707e2 COMMA  9.388271e0 COMMA -1.509299e3 COMMA -9.041311e2} COMMA
			{-1.051633e3 COMMA 2.255988e1 COMMA  -2.240776e3 COMMA  3.416331e3 COMMA -1.925435e2 COMMA  1.063188e1 COMMA -1.666427e3 COMMA -1.026652e3} COMMA
			{-1.043410e3 COMMA 2.280261e1 COMMA  -2.281027e3 COMMA  3.453872e3 COMMA -1.969194e2 COMMA  1.101885e1 COMMA -1.685657e3 COMMA -1.018421e3} COMMA
		};)

		DEVICE_DEFINE(static constexpr inline double, choose[14 - 4 + 1][24], = {
			{
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000016 COMMA
				1.000382 COMMA 1.002544 COMMA 1.009003 COMMA 1.022212 COMMA 1.043747 COMMA 1.074176 COMMA 1.113314 COMMA 1.215134 COMMA 1.343451 COMMA 1.493867 COMMA 1.664363 COMMA 1.854977
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000001 COMMA 1.000126 COMMA
				1.001778 COMMA 1.008703 COMMA 1.025095 COMMA 1.053477 COMMA 1.094361 COMMA 1.146883 COMMA 1.209546 COMMA 1.359068 COMMA 1.532917 COMMA 1.725840 COMMA 1.936524 COMMA 2.166286
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000005 COMMA 
				1.000164 COMMA 1.001296 COMMA 1.005132 COMMA 1.013718 COMMA 1.028685 COMMA 1.050938 COMMA 1.080705 COMMA 1.161517 COMMA 1.266929 COMMA 1.392745 COMMA 1.536751 COMMA 1.699342
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA
				1.000012 COMMA 1.000160 COMMA 1.000897 COMMA 1.003083 COMMA 1.007809 COMMA 1.016163 COMMA 1.029098 COMMA 1.071801 COMMA 1.141522 COMMA 1.244530 COMMA 1.389797 COMMA 1.590952
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000001 COMMA 
				1.000054 COMMA 1.000533 COMMA 1.002449 COMMA 1.007289 COMMA 1.016565 COMMA 1.031512 COMMA 1.053057 COMMA 1.118848 COMMA 1.220214 COMMA 1.366498 COMMA 1.572476 COMMA 1.860793 
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 
				1.000000 COMMA 1.000000 COMMA 1.000008 COMMA 1.000060 COMMA 1.000286 COMMA 1.000980 COMMA 1.002659 COMMA 1.012335 COMMA 1.038607 COMMA 1.094915 COMMA 1.199775 COMMA 1.379520 
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000001 COMMA 1.000004 COMMA 1.000017 COMMA 1.001149 COMMA 
				1.009353 COMMA 1.033083 COMMA 1.077523 COMMA 1.144356 COMMA 1.234002 COMMA 1.347212 COMMA 1.485621 COMMA 1.848303 COMMA 2.346120 COMMA 3.005278 COMMA 3.855614 COMMA 4.940249 
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000002 COMMA 1.000019 COMMA 1.000091 COMMA 1.000307 COMMA 1.000809 COMMA 1.014850 COMMA 
				1.063783 COMMA 1.153860 COMMA 1.279281 COMMA 1.432145 COMMA 1.606260 COMMA 1.797679 COMMA 2.004396 COMMA 2.463350 COMMA 2.995063 COMMA 3.632788 COMMA 4.440947 COMMA 5.538404 
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000004 COMMA 1.000022 COMMA 1.000087 COMMA 1.000261 COMMA 1.006988 COMMA 
				1.036149 COMMA 1.097022 COMMA 1.187924 COMMA 1.302823 COMMA 1.435985 COMMA 1.583461 COMMA 1.743116 COMMA 2.097506 COMMA 2.508070 COMMA 3.004926 COMMA 3.650892 COMMA 4.565183 
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 
				1.000001 COMMA 1.000018 COMMA 1.000148 COMMA 1.000669 COMMA 1.002103 COMMA 1.005194 COMMA 1.010868 COMMA 1.034512 COMMA 1.084652 COMMA 1.180068 COMMA 1.354034 COMMA 1.666865 
			} COMMA {
				1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000000 COMMA 1.000002 COMMA 1.000012 COMMA 1.000043 COMMA 1.002113 COMMA 
				1.014763 COMMA 1.047604 COMMA 1.104672 COMMA 1.185526 COMMA 1.288184 COMMA 1.411048 COMMA 1.553941 COMMA 1.909907 COMMA 2.405751 COMMA 3.157500 COMMA 4.395655 COMMA 6.561123
			}
        };)
	}
}